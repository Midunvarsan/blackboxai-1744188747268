using System;
using System.Collections.Generic;
using System.Linq;

namespace VulnerabilityAnalyzer.Models
{
    public class VifModel
    {
        public double Gamma { get; private set; }
        public double VII { get; private set; }
        public Dictionary<DateTime, int> VulnerabilityCounts { get; private set; }

        public VifModel(Dictionary<string, List<DateTime>> vulnerabilityData)
        {
            VulnerabilityCounts = CountVulnerabilitiesByTime(vulnerabilityData);
            EstimateParameters();
        }

        private Dictionary<DateTime, int> CountVulnerabilitiesByTime(Dictionary<string, List<DateTime>> data)
        {
            var counts = new Dictionary<DateTime, int>();
            foreach (var entry in data)
            {
                foreach (var date in entry.Value)
                {
                    var dateOnly = date.Date;
                    if (counts.ContainsKey(dateOnly))
                        counts[dateOnly]++;
                    else
                        counts[dateOnly] = 1;
                }
            }
            return counts;
        }

        private void EstimateParameters()
        {
            // MLE estimation for VII and gamma
            var n = VulnerabilityCounts.Count;
            var logSum = VulnerabilityCounts.Sum(x => Math.Log(x.Value));
            
            VII = Math.Pow((1.0 / n) * logSum, -1);
            Gamma = n / VulnerabilityCounts.Sum(x => Math.Log(x.Value) - Math.Log(VII));
        }

        public double CalculateVif(DateTime timePoint)
        {
            var T = (timePoint - VulnerabilityCounts.Keys.Min()).TotalDays;
            var NV = VulnerabilityCounts.Where(x => x.Key <= timePoint).Sum(x => x.Value);
            
            return (1.0 / (Gamma * Math.Pow(T, Gamma))) * Math.Pow(NV, Gamma - 1);
        }

        public Dictionary<DateTime, double> PredictFutureVulnerabilities(DateTime endDate)
        {
            var predictions = new Dictionary<DateTime, double>();
            var currentDate = DateTime.Now.Date;
            var maxDate = endDate.Date;
            
            while (currentDate <= maxDate)
            {
                predictions[currentDate] = CalculateVif(currentDate);
                currentDate = currentDate.AddDays(1);
            }
            
            return predictions;
        }
    }
}
