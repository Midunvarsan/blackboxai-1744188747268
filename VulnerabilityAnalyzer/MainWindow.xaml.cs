#if USE_WPF
using System;
using System.Windows;
using System.Windows.Threading;

namespace VulnerabilityAnalyzer
{
    public partial class MainWindow : Window
    {
        private readonly SystemMonitor _systemMonitor = new SystemMonitor();
        private readonly VulnerabilityPredictor _predictor = new VulnerabilityPredictor();
        private readonly DispatcherTimer _refreshTimer = new DispatcherTimer();

        public MainWindow()
        {
            InitializeComponent();
            Loaded += MainWindow_Loaded;
            
            // Setup refresh timer
            _refreshTimer.Interval = TimeSpan.FromSeconds(5);
            _refreshTimer.Tick += RefreshTimer_Tick;
            _refreshTimer.Start();
        }

        private void MainWindow_Loaded(object sender, RoutedEventArgs e)
        {
            RefreshSystemInfo();
        }

        private void RefreshTimer_Tick(object? sender, EventArgs e)
        {
            RefreshSystemInfo();
        }

        private void RefreshSystemInfo()
        {
            txtOSVersion.Text = $"OS Version: {_systemMonitor.GetOSVersion()}";
            txtUpTime.Text = $"System Uptime: {_systemMonitor.GetSystemUpTime()}";
            txtCPUUsage.Text = $"CPU Usage: {_systemMonitor.GetCPUUsage()}";
            txtMemoryUsage.Text = $"Memory Usage: {_systemMonitor.GetMemoryUsage()}";
        }

        private void BtnAnalyze_Click(object sender, RoutedEventArgs e)
        {
            // Sample vulnerabilities - in real app these would come from a database/API
            _predictor.AddVulnerability("CVE-2023-1234", DateTime.Now.AddDays(-30));
            _predictor.AddVulnerability("CVE-2023-5678", DateTime.Now.AddDays(-60));
            _predictor.AddVulnerability("CVE-2023-9012", DateTime.Now.AddDays(-90));
            
            var risks = _predictor.GetRiskAssessment();
            dgVulnerabilities.ItemsSource = risks;
        }

        private void BtnRefresh_Click(object sender, RoutedEventArgs e)
        {
            BtnAnalyze_Click(sender, e);
        }
    }
}
#endif
