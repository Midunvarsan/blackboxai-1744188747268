using System;
using System.Collections.Generic;
using System.Linq;

namespace VulnerabilityAnalyzer
{
    public class VulnerabilityPredictor
    {
        private readonly Dictionary<string, List<DateTime>> _vulnerabilityHistory = new Dictionary<string, List<DateTime>>();
        private readonly Random _random = new Random();

        public void AddVulnerability(string cveId, DateTime discoveryDate)
        {
            if (!_vulnerabilityHistory.ContainsKey(cveId))
            {
                _vulnerabilityHistory[cveId] = new List<DateTime>();
            }
            _vulnerabilityHistory[cveId].Add(discoveryDate);
        }

        public Dictionary<string, double> PredictVulnerabilities()
        {
            var predictions = new Dictionary<string, double>();
            
            foreach (var entry in _vulnerabilityHistory)
            {
                if (entry.Value.Count > 1)
                {
                    // Simple linear regression for prediction
                    var dates = entry.Value.Select(d => d.ToOADate()).ToArray();
                    var xValues = Enumerable.Range(0, dates.Length).Select(i => (double)i).ToArray();
                    
                    double xMean = xValues.Average();
                    double yMean = dates.Average();
                    
                    double numerator = 0;
                    double denominator = 0;
                    
                    for (int i = 0; i < xValues.Length; i++)
                    {
                        numerator += (xValues[i] - xMean) * (dates[i] - yMean);
                        denominator += Math.Pow(xValues[i] - xMean, 2);
                    }
                    
                    double slope = numerator / denominator;
                    double intercept = yMean - slope * xMean;
                    
                    // Predict next occurrence
                    double nextX = xValues.Max() + 1;
                    double nextDate = slope * nextX + intercept;
                    
                    predictions.Add(entry.Key, nextDate);
                }
                else
                {
                    // Simple random prediction for single data point
                    predictions.Add(entry.Key, entry.Value[0].AddDays(_random.Next(30, 180)).ToOADate());
                }
            }
            
            return predictions;
        }

        public Dictionary<string, string> GetRiskAssessment()
        {
            var risks = new Dictionary<string, string>();
            var predictions = PredictVulnerabilities();
            
            foreach (var prediction in predictions)
            {
                DateTime predictedDate = DateTime.FromOADate(prediction.Value);
                TimeSpan timeUntilPredicted = predictedDate - DateTime.Now;
                
                if (timeUntilPredicted.TotalDays < 30)
                    risks[prediction.Key] = "Critical";
                else if (timeUntilPredicted.TotalDays < 90)
                    risks[prediction.Key] = "High";
                else if (timeUntilPredicted.TotalDays < 180)
                    risks[prediction.Key] = "Medium";
                else
                    risks[prediction.Key] = "Low";
            }
            
            return risks;
        }
    }
}
