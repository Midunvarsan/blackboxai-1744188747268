using System;
using System.Diagnostics;
using System.Runtime.InteropServices;

namespace VulnerabilityAnalyzer
{
    public class SystemMonitor
    {
        public string GetOSVersion()
        {
            if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
            {
                return $"Windows {Environment.OSVersion.Version}";
            }
            else if (RuntimeInformation.IsOSPlatform(OSPlatform.Linux))
            {
                return "Linux";
            }
            else if (RuntimeInformation.IsOSPlatform(OSPlatform.OSX))
            {
                return "macOS";
            }
            return "Unknown OS";
        }

        public string GetSystemUpTime()
        {
            return TimeSpan.FromMilliseconds(Environment.TickCount64).ToString(@"dd\.hh\:mm\:ss");
        }

        public string GetCPUUsage()
        {
            // Cross-platform CPU usage requires more complex implementation
            return "N/A (Cross-platform CPU monitoring not implemented)";
        }

        public string GetMemoryUsage()
        {
            if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
            {
                return GetWindowsMemoryUsage();
            }
            return "N/A (Cross-platform memory monitoring not implemented)";
        }

        private string GetWindowsMemoryUsage()
        {
            try
            {
                var process = Process.GetCurrentProcess();
                var usedMB = process.WorkingSet64 / (1024 * 1024);
                var totalMB = GetTotalPhysicalMemory() / (1024 * 1024);
                return $"{usedMB}MB / {totalMB}MB ({(double)usedMB/totalMB:0%})";
            }
            catch
            {
                return "Memory info unavailable";
            }
        }

        private long GetTotalPhysicalMemory()
        {
            if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
            {
                return GetWindowsTotalMemory();
            }
            return 0;
        }

        [DllImport("kernel32.dll")]
        [return: MarshalAs(UnmanagedType.Bool)]
        static extern bool GetPhysicallyInstalledSystemMemory(out long TotalMemoryInKilobytes);

        private long GetWindowsTotalMemory()
        {
            try
            {
                GetPhysicallyInstalledSystemMemory(out long memKb);
                return memKb * 1024;
            }
            catch
            {
                return 0;
            }
        }
    }
}
